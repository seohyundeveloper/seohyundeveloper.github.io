{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"2a88e3a8-9eb4-5ff0-b1a5-31e7c584760f","excerpt":"Figma 경험하기 헙업도구인 Figma를 직접 사용해 보면서 남긴 기록입니다. 1. Figma 계정 생성하기 Figma 공식 페이지에서 계정을 생성해 줍니다.\r\n링크 : https://www.figma.com 2. DeskTop 설치와 미러링도 할 수 있게 셋팅 해 줍니다. Figma는 Web기반 프로그램이기 때문에 별다른 설치없이 브라우저에서도 >사용이 가능합니다. 모든 작업이 네트워크 기반에서 이뤄집니다.\r\n크롬, 사파리, 파이어폭스, 엣지 등 많은 브라우저에서 지원합니다. 하지만 몇가지 불편한점이 있어 데스크탑 앱을 설치하는 것을 권장합니다. ( 내 컴퓨터의 폰트를 공유하는 경우 등등등 ) Figma는 모바일에서도 디자인한 화면이나 프로포타입을 확인할 수 있기 때문에 미러링 셋팅도 필요합니다. 안드로이드와 iOS도 지원하므로 App에 가서 다운로드 받습니다. ※ 주의사항 : Figma는 Web기반이므로 Local환경에서 작업하는 경우 주의를 기울여야 합니다. 작업 내용이 클…","frontmatter":{"categories":"Tools","title":"Tools - Figma 사용해보기","date":"October 02, 2023"},"fields":{"slug":"/tool-figma/"}}},{"node":{"id":"ee563a9d-b51e-583c-8a0d-539c8b58e195","excerpt":"챌린지 설명 CSS Layout 챌린지를 도전하면서 배운것들을 기록합니다. 1. BEM 방법론 은 네이밍 방법론 중 하나입니다. 프로젝트가 크면 클수록\r\n네이밍 규칙은 중요하게 작용하기 때문에 공부할 필요가 있습니다. BEM의 가장 큰 특징은 입니다. 2. BEM의 장점 목적과 기능을 명확히 전달합니다. 요소의 구조를 효율적으로 전달합니다. css 명시도를 항상 낮은 수준으로 유지하기 때문에 구체성으로 인한 코드의 길어짐을 방지할 수 있습니다. 3. Block (블록) block(블록)은 페이지 전체 Element(요소)를 의미하거나 하위 Element(요소)를 감싸는 컨테이너를 의미합니다. 즉 독립적인 의미를 가지는 추상화된 컴포넌트 입니다. 규칙 문자, 숫자, 대시(-)로 구성됩니다. 여기서  모두 블록 역할을 합니다. 클래스를 적용할 수 있는 DOM노드라면 뭐든 블록이 될 수 있습니다. css의 경우  사용해야 하며, 하고 있습니다. 다른 블록에 대한 종속성이 없습니다. 4.…","frontmatter":{"categories":"CSS","title":"CSS Layout - 챌린지 도전하기7","date":"September 26, 2023"},"fields":{"slug":"/css7/"}}},{"node":{"id":"bfcf1701-93e9-5353-8575-71c9297a0ef9","excerpt":"챌린지 설명 CSS Layout 챌린지를 도전하면서 배운것들을 기록합니다. 1. SCSS 란 SCSS는 CSS를 좀 더 생산적으로 사용하기 위해서 CSS를 확장한 언어 입니다. 하지만 브라우저는 SCSS를 이해하지 못합니다. 그래서 SASS로 SCSS 코드를 처리해서 브라우저가 이해할 수 있는 CSS로 만드는 작업을 해야 합니다. 우리가 작성한 SCSS 코드를 브라우저가 이해할 수 있도록 변경하기 위해서는 Vite, Webpack,Gulp 같은 프로그램이 필요합니다. 2. SCSS 사용이유 예전에는 CSS에서 변수를 사용하고 싶다면 SCSS를 사용해야 했지만, 지금은 CSS만으로도 가능합니다. 이제는 CSS 변수는 표준이 되었고, 모든 브라우저에서 이해할 수 있습니다. 하지만 아직 CSS에는 nesting, mix-in, extend 등의 기능은 없습니다. SCSS의 변수사용 예 CSS의 변수사용 예 3. SCSS 설치 및 사용방법 여기서는 Vite를 이용하는 방법을 알아보도록 하…","frontmatter":{"categories":"CSS","title":"CSS Layout - 챌린지 도전하기6","date":"September 24, 2023"},"fields":{"slug":"/css6/"}}},{"node":{"id":"3719e692-c89a-5355-bf19-f24b6a3021e7","excerpt":"챌린지 설명 CSS Layout 챌린지를 도전하면서 배운것들을 기록합니다. 1. Grid의 응용 속성들 - max-content / min-content  위와 같이 내용물(텍스트)이 있어도 열의 크기를 1fr로 지정했기 때문에 열의 크기는 변화하지 않고 텍스트가 두줄로 보여집니다. 이때 텍스트를 한줄로 보이도록 열을 나타내고자 한다면 해당 열의 크기에 max-content속성을 주면 아래와 같이 레이아웃이 변경됩니다.\r\n또한 내용물의 크기를 px단위로도 지정할 수 있습니다.  min-content의 경우 텍스트의 가장 긴단어의 길이를 기준으로 열의 최소 길이를 레이아웃으로 잡습니다. 아래와 같이 모두 텍스트가 쪼개져 나타나는 것을 확인할 수 있습니다.  2. 반응형 그리드를 구축시 많이 사용하는 속성 - minmax()함수 페이지 크기를 줄일 때, 가운데 열이 400px미만으로 줄어들지 않도록 하기 위해서는 minmax()함수를 사용할 수 있습니다. minmax()함수를 이용하면…","frontmatter":{"categories":"CSS","title":"CSS Layout - 챌린지 도전하기5","date":"September 23, 2023"},"fields":{"slug":"/css5/"}}},{"node":{"id":"4b85b42e-c8ce-5fd8-9ace-ddc706a6ca38","excerpt":"챌린지 설명 CSS Layout 챌린지를 도전하면서 배운것들을 기록합니다. 1. Grid의 응용버전 Grid를 사용하다 보면 동적으로 컨텐츠가 생기는 경우를 접하게 됩니다. 이런경우 준비되지 않은 콘텐츠에 대해 grid-auto-columns / grid-auto-row / grid-auto-flow의 속성을 통해 grid에 어떤 일이 발생할 지 결정할 수 있습니다. 예를 들어 2x2의 column과 row를 만든다고 생각해 봅시다. 아래와 같이 2x2형태로 레이아웃이 그려졌습니다.  만약 유저가 동적으로 콘텐츠를 작업하는 경우, item의 갯수가 유동적이므로 실제 HTML을 제어할 수가 없습니다. 예를 들어 6개의 콘텐츠가 늘어나 총 10개의 콘텐츠가 생긴 경우를 생각해 봅시다. 4개의 콘텐츠가 동일하게 차지하던 레이아웃이 이상하게 변한것을 확인할 수 있습니다.  이때 grid-auto-columns / grid-auto-row / grid-auto-flow의 속성을 통해 아직 …","frontmatter":{"categories":"CSS","title":"CSS Layout - 챌린지 도전하기4","date":"September 22, 2023"},"fields":{"slug":"/css4/"}}},{"node":{"id":"6a1477fd-5e3e-5a30-82a1-9bef87112cef","excerpt":"챌린지 설명 CSS Layout 챌린지를 도전하면서 배운것들을 기록합니다. 1. Grid란 Flexbox가 1차원 레이아웃 시스템인 반면 Grid는 2차원 레이아웃 시스템입니다. Flexbox보다 강력하게 열과 행을 모두 제어하고 커스터마이징 할 수 있습니다. Grid역시 Flexbox와 마찬가지고 부모에게 명령을 합니다. 또한 Flexbox와 똑같은 속성을 사용하기도 하며, Grid의 단위는 셀입니다. 2. Grid 속성 1.grid-template-columns / grid-template-rows 행 / 열의  크기를 나타내주는 속성입니다. 사용단위로는 px이나 fr로 사용합니다. grid-column-start / gird-column-end 각 아이템을 원하는 위치의 시작점과 끝점을 지정하여 위치할 수 있습니다.  ※파란동그라미는 column의 위치 번호 ※연두동그라미는 row의 위치 번호 위에서 처럼 바꿔주면 아래에서 이름을 확인할 수 있습니다.  grid-templat…","frontmatter":{"categories":"CSS","title":"CSS Layout - 챌린지 도전하기3","date":"September 20, 2023"},"fields":{"slug":"/css3/"}}},{"node":{"id":"ab49bd84-3b0c-5352-b5b6-d136ca4289ab","excerpt":"챌린지 설명 CSS Layout 챌린지를 도전하면서 배운것들을 기록합니다. 1. 반응형 레이아웃 만들기 화면의 크기가 다양하기 때문에 width를 직접 px단위로 준다면 레이아웃이 화면마다 다르게 나타나게 됩니다. 따라서 flex를 이용해서 레이아웃을 많이 구성합니다. flex의 특성을 가지고 px이 아닌 비율로 크기를 조절할 수 있습니다. 위의 코드를 사용하면 브라우저에 아래와 같이 출력됩니다.  각각의 아이템에 비율을 조절하기 위해서는 flex-grow 속성을 이용하면 됩니다. 상대적인 값이므로 아래처럼 화면이 채워집니다.","frontmatter":{"categories":"CSS","title":"CSS Layout - 챌린지 도전하기2","date":"September 20, 2023"},"fields":{"slug":"/css2/"}}},{"node":{"id":"02df0d7f-fa6f-5509-93d4-46996e95cfda","excerpt":"","frontmatter":{"categories":"React","title":"React 배우기","date":"September 18, 2023"},"fields":{"slug":"/react/"}}},{"node":{"id":"a36762fc-a504-564c-ab66-40f7a9254726","excerpt":"Vite란 Vite는 Vue의 창시자인 Evan You가 만든 새로운 프론트엔드 도구로 프랑스어로 “빠르다(Quick)“를 의미하며 빠르고 간결한 모던 웹 프로젝트 개발 경험을 초점을 맞춰 탄생한 빌드 도구이다.","frontmatter":{"categories":"Tools","title":"Vite","date":"September 18, 2023"},"fields":{"slug":"/build-vite/"}}},{"node":{"id":"3881cfde-2b4c-52e2-815d-3ce503e7f76a","excerpt":"챌린지 설명 CSS Layout 챌린지를 도전하면서 배운것들을 기록합니다. 1. Flexbox가 나오게 된 배경 웹페이지를 생성할때 레이아웃을 만든다는게 쉬운일이 아닙니다. 아래와 같이 flexbox를 사용하지 않고 3개의 박스를 한 화면에 나란히 배치시켜 보도록 하겠습니다. 예시 )  [HTML] [CSS] px을 사용하지 않고 나름 반응형에 적용한다고 %를 사용하여 작업해보았습니다. 또다른 방식의 { float: left; } 를 이용해서 사용해도 또다시 명령적으로 margin을\r\n사용할 수 밖에 없었습니다. 게다가 브라우저의 크기가 너무나도 다양하기 때문에 flexbox를 사용하지 않고 레이아웃을\r\n만드는 일은 엄청난 시간과 노력을 요구합니다. 이렇게 우리가 하는 계산을 컴퓨터가 대신 해주면 어떨가? 하는 생각에 flexbox가 나타나게 되었습니다. 2. Flexbox 사용하는 이점 레이아웃을 만드는 과정에서 flexbox를 사용하기 전에는 컴퓨터에게 일일히 계산해서\r\n모든것…","frontmatter":{"categories":"CSS","title":"CSS Layout - 챌린지 도전하기1","date":"September 18, 2023"},"fields":{"slug":"/css/"}}},{"node":{"id":"829768a8-8433-5e23-a191-50ad9eb63240","excerpt":"제 블로그의 테마나 Gatsby의 다른 테마를 활용해서 Github Blog를 만들고 싶은 분들이 계실텐데요! 이런 분들에게 도움을 드리고자 이 글을 쓰게 되었습니다. 잘 안되는 부분이나 궁금한 점을 댓글로 남겨주면 확인해보고 답변 드리도록 하겠습니다! 1. Repository 생성하기 GitHub Blog를 만들려면 Github에 Repository를 생성해야 합니다.  GitHub에 로그인 한 뒤에 우측 상단에 있는 New Repository 버튼을 클릭하면 repository 생성 페이지로 이동하게 됩니다. 이 때 Import a repository 버튼을 클릭합니다.  아래 페이지에 도달하시면 두 가지 정보를 넣어주셔야 하는데, Your old repository’s clone URL에는 사용하고자 하는 gatsby 테마가 있는 repository의 주소를 넣어주시면 됩니다. 제 블로그 테마를 쓰고 싶으신 분들은 여기에 https://github.com/zoomKoding/…","frontmatter":{"categories":"featured","title":"Gatsby 테마로 GitHub Blog 만들기","date":"July 06, 2021"},"fields":{"slug":"/gatsby-github-blog/"}}},{"node":{"id":"950f4208-2e47-5a4a-8619-1070d7519260","excerpt":"👋 소개 블로그를 직접 운영하면서 조금씩 그려봤던 이상적인 개발 블로그 테마를 Gatsby를 통해 만들어보게 되었습니다. 이 테마가 블로그를 운영하고자 하시는 분들에게 자신의 이야기를 잘 담을 수 있는 공간이 되었으면 좋겠습니다.🙌 블로그 테마가 맘에 드셨다면 아래 과정을 통해 자신의 블로그를 만들어보시길 바랍니다! 혹시 만드시는 과정에서 궁금하신 점이나 어려움이 있으시다면 이슈를 통해 문의 남겨주세요! 스타는 블로그 테마를 지속적으로 발전시키는데 큰 힘이 됩니다!⭐️ 🚀 시작하기 Github Page나 Netlify 중 원하시는 배포 환경에 따라 다음 과정을 진행하시면 빠르게 블로그를 만드실 수 있습니다. 🦖 GitHub Page로 만들기 깃헙 페이지를 통해 블로그를 만드시다면 아래 글을 참고해주세요! Gatsby 테마로 GitHub Blog 만들기 🔧 Netlify로 만들기 아래 버튼을 활용하면 개인 계정에 를 사용하고 있는 Repository 생성과 Netlify에 배포를 동시…","frontmatter":{"categories":"featured","title":"쉽고 빠르게 나만의 개츠비(Gatsby) 블로그 만들기","date":"March 22, 2021"},"fields":{"slug":"/gatsby-starter-zoomkoding-introduction/"}}}]},"site":{"siteMetadata":{"language":"ko","author":{"name":"민서현","bio":{"role":"개발자","description":["사람에 가치를 두는","능동적으로 일하는","이로운 것을 만드는"],"thumbnail":"my_img.png"},"social":{"github":"","linkedIn":"","email":""}}}}},"pageContext":{}},"staticQueryHashes":["1073350324","1956554647","2938748437","3350743975"]}