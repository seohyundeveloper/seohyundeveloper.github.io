{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/CSS","result":{"pageContext":{"currentCategory":"CSS","categories":["All","CS지식","JS","Tools","CSS","React","featured"],"edges":[{"node":{"id":"ee563a9d-b51e-583c-8a0d-539c8b58e195","excerpt":"챌린지 설명 CSS Layout 챌린지를 도전하면서 배운것들을 기록합니다. 1. BEM 방법론 은 네이밍 방법론 중 하나입니다. 프로젝트가 크면 클수록\r\n네이밍 규칙은 중요하게 작용하기 때문에 공부할 필요가 있습니다. BEM의 가장 큰 특징은 입니다. 2. BEM의 장점 목적과 기능을 명확히 전달합니다. 요소의 구조를 효율적으로 전달합니다. css 명시도를 항상 낮은 수준으로 유지하기 때문에 구체성으로 인한 코드의 길어짐을 방지할 수 있습니다. 3. Block (블록) block(블록)은 페이지 전체 Element(요소)를 의미하거나 하위 Element(요소)를 감싸는 컨테이너를 의미합니다. 즉 독립적인 의미를 가지는 추상화된 컴포넌트 입니다. 규칙 문자, 숫자, 대시(-)로 구성됩니다. 여기서  모두 블록 역할을 합니다. 클래스를 적용할 수 있는 DOM노드라면 뭐든 블록이 될 수 있습니다. css의 경우  사용해야 하며, 하고 있습니다. 다른 블록에 대한 종속성이 없습니다. 4.…","fields":{"slug":"/css7/"},"frontmatter":{"categories":"CSS","title":"CSS Layout - 챌린지 도전하기7","date":"September 26, 2023"}},"next":{"fields":{"slug":"/css6/"}},"previous":{"fields":{"slug":"/tool-figma/"}}},{"node":{"id":"bfcf1701-93e9-5353-8575-71c9297a0ef9","excerpt":"챌린지 설명 CSS Layout 챌린지를 도전하면서 배운것들을 기록합니다. 1. SCSS 란 SCSS는 CSS를 좀 더 생산적으로 사용하기 위해서 CSS를 확장한 언어 입니다. 하지만 브라우저는 SCSS를 이해하지 못합니다. 그래서 SASS로 SCSS 코드를 처리해서 브라우저가 이해할 수 있는 CSS로 만드는 작업을 해야 합니다. 우리가 작성한 SCSS 코드를 브라우저가 이해할 수 있도록 변경하기 위해서는 Vite, Webpack,Gulp 같은 프로그램이 필요합니다. 2. SCSS 사용이유 예전에는 CSS에서 변수를 사용하고 싶다면 SCSS를 사용해야 했지만, 지금은 CSS만으로도 가능합니다. 이제는 CSS 변수는 표준이 되었고, 모든 브라우저에서 이해할 수 있습니다. 하지만 아직 CSS에는 nesting, mix-in, extend 등의 기능은 없습니다. SCSS의 변수사용 예 CSS의 변수사용 예 3. SCSS 설치 및 사용방법 여기서는 Vite를 이용하는 방법을 알아보도록 하…","fields":{"slug":"/css6/"},"frontmatter":{"categories":"CSS","title":"CSS Layout - 챌린지 도전하기6","date":"September 24, 2023"}},"next":{"fields":{"slug":"/css5/"}},"previous":{"fields":{"slug":"/css7/"}}},{"node":{"id":"3719e692-c89a-5355-bf19-f24b6a3021e7","excerpt":"챌린지 설명 CSS Layout 챌린지를 도전하면서 배운것들을 기록합니다. 1. Grid의 응용 속성들 - max-content / min-content  위와 같이 내용물(텍스트)이 있어도 열의 크기를 1fr로 지정했기 때문에 열의 크기는 변화하지 않고 텍스트가 두줄로 보여집니다. 이때 텍스트를 한줄로 보이도록 열을 나타내고자 한다면 해당 열의 크기에 max-content속성을 주면 아래와 같이 레이아웃이 변경됩니다.\r\n또한 내용물의 크기를 px단위로도 지정할 수 있습니다.  min-content의 경우 텍스트의 가장 긴단어의 길이를 기준으로 열의 최소 길이를 레이아웃으로 잡습니다. 아래와 같이 모두 텍스트가 쪼개져 나타나는 것을 확인할 수 있습니다.  2. 반응형 그리드를 구축시 많이 사용하는 속성 - minmax()함수 페이지 크기를 줄일 때, 가운데 열이 400px미만으로 줄어들지 않도록 하기 위해서는 minmax()함수를 사용할 수 있습니다. minmax()함수를 이용하면…","fields":{"slug":"/css5/"},"frontmatter":{"categories":"CSS","title":"CSS Layout - 챌린지 도전하기5","date":"September 23, 2023"}},"next":{"fields":{"slug":"/css4/"}},"previous":{"fields":{"slug":"/css6/"}}},{"node":{"id":"4b85b42e-c8ce-5fd8-9ace-ddc706a6ca38","excerpt":"챌린지 설명 CSS Layout 챌린지를 도전하면서 배운것들을 기록합니다. 1. Grid의 응용버전 Grid를 사용하다 보면 동적으로 컨텐츠가 생기는 경우를 접하게 됩니다. 이런경우 준비되지 않은 콘텐츠에 대해 grid-auto-columns / grid-auto-row / grid-auto-flow의 속성을 통해 grid에 어떤 일이 발생할 지 결정할 수 있습니다. 예를 들어 2x2의 column과 row를 만든다고 생각해 봅시다. 아래와 같이 2x2형태로 레이아웃이 그려졌습니다.  만약 유저가 동적으로 콘텐츠를 작업하는 경우, item의 갯수가 유동적이므로 실제 HTML을 제어할 수가 없습니다. 예를 들어 6개의 콘텐츠가 늘어나 총 10개의 콘텐츠가 생긴 경우를 생각해 봅시다. 4개의 콘텐츠가 동일하게 차지하던 레이아웃이 이상하게 변한것을 확인할 수 있습니다.  이때 grid-auto-columns / grid-auto-row / grid-auto-flow의 속성을 통해 아직 …","fields":{"slug":"/css4/"},"frontmatter":{"categories":"CSS","title":"CSS Layout - 챌린지 도전하기4","date":"September 22, 2023"}},"next":{"fields":{"slug":"/css3/"}},"previous":{"fields":{"slug":"/css5/"}}},{"node":{"id":"6a1477fd-5e3e-5a30-82a1-9bef87112cef","excerpt":"챌린지 설명 CSS Layout 챌린지를 도전하면서 배운것들을 기록합니다. 1. Grid란 Flexbox가 1차원 레이아웃 시스템인 반면 Grid는 2차원 레이아웃 시스템입니다. Flexbox보다 강력하게 열과 행을 모두 제어하고 커스터마이징 할 수 있습니다. Grid역시 Flexbox와 마찬가지고 부모에게 명령을 합니다. 또한 Flexbox와 똑같은 속성을 사용하기도 하며, Grid의 단위는 셀입니다. 2. Grid 속성 1.grid-template-columns / grid-template-rows 행 / 열의  크기를 나타내주는 속성입니다. 사용단위로는 px이나 fr로 사용합니다. grid-column-start / gird-column-end 각 아이템을 원하는 위치의 시작점과 끝점을 지정하여 위치할 수 있습니다.  ※파란동그라미는 column의 위치 번호 ※연두동그라미는 row의 위치 번호 위에서 처럼 바꿔주면 아래에서 이름을 확인할 수 있습니다.  grid-templat…","fields":{"slug":"/css3/"},"frontmatter":{"categories":"CSS","title":"CSS Layout - 챌린지 도전하기3","date":"September 20, 2023"}},"next":{"fields":{"slug":"/css2/"}},"previous":{"fields":{"slug":"/css4/"}}},{"node":{"id":"ab49bd84-3b0c-5352-b5b6-d136ca4289ab","excerpt":"챌린지 설명 CSS Layout 챌린지를 도전하면서 배운것들을 기록합니다. 1. 반응형 레이아웃 만들기 화면의 크기가 다양하기 때문에 width를 직접 px단위로 준다면 레이아웃이 화면마다 다르게 나타나게 됩니다. 따라서 flex를 이용해서 레이아웃을 많이 구성합니다. flex의 특성을 가지고 px이 아닌 비율로 크기를 조절할 수 있습니다. 위의 코드를 사용하면 브라우저에 아래와 같이 출력됩니다.  각각의 아이템에 비율을 조절하기 위해서는 flex-grow 속성을 이용하면 됩니다. 상대적인 값이므로 아래처럼 화면이 채워집니다.","fields":{"slug":"/css2/"},"frontmatter":{"categories":"CSS","title":"CSS Layout - 챌린지 도전하기2","date":"September 20, 2023"}},"next":{"fields":{"slug":"/react/"}},"previous":{"fields":{"slug":"/css3/"}}},{"node":{"id":"3881cfde-2b4c-52e2-815d-3ce503e7f76a","excerpt":"챌린지 설명 CSS Layout 챌린지를 도전하면서 배운것들을 기록합니다. 1. Flexbox가 나오게 된 배경 웹페이지를 생성할때 레이아웃을 만든다는게 쉬운일이 아닙니다. 아래와 같이 flexbox를 사용하지 않고 3개의 박스를 한 화면에 나란히 배치시켜 보도록 하겠습니다. 예시 )  [HTML] [CSS] px을 사용하지 않고 나름 반응형에 적용한다고 %를 사용하여 작업해보았습니다. 또다른 방식의 { float: left; } 를 이용해서 사용해도 또다시 명령적으로 margin을\r\n사용할 수 밖에 없었습니다. 게다가 브라우저의 크기가 너무나도 다양하기 때문에 flexbox를 사용하지 않고 레이아웃을\r\n만드는 일은 엄청난 시간과 노력을 요구합니다. 이렇게 우리가 하는 계산을 컴퓨터가 대신 해주면 어떨가? 하는 생각에 flexbox가 나타나게 되었습니다. 2. Flexbox 사용하는 이점 레이아웃을 만드는 과정에서 flexbox를 사용하기 전에는 컴퓨터에게 일일히 계산해서\r\n모든것…","fields":{"slug":"/css/"},"frontmatter":{"categories":"CSS","title":"CSS Layout - 챌린지 도전하기1","date":"September 18, 2023"}},"next":{"fields":{"slug":"/gatsby-github-blog/"}},"previous":{"fields":{"slug":"/build-vite/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}