{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/CSS","result":{"pageContext":{"currentCategory":"CSS","categories":["All","CSS","React","빌드도구","블로그","featured"],"edges":[{"node":{"id":"ab49bd84-3b0c-5352-b5b6-d136ca4289ab","excerpt":"챌린지 설명 CSS Layout 챌린지를 도전하면서 배운것들을 기록합니다. 1. 반응형 레이아웃 만들기 화면의 크기가 다양하기 때문에 width를 직접 px단위로 준다면 레이아웃이 화면마다 다르게 나타나게 됩니다. 따라서 flex를 이용해서 레이아웃을 많이 구성합니다. flex의 특성을 가지고 px이 아닌 비율로 크기를 조절할 수 있습니다. 위의 코드를 사용하면 브라우저에 아래와 같이 출력됩니다.  각각의 아이템에 비율을 조절하기 위해서는 flex-grow 속성을 이용하면 됩니다. 상대적인 값이므로 아래처럼 화면이 채워집니다.","fields":{"slug":"/css2/"},"frontmatter":{"categories":"CSS","title":"CSS Layout - 챌린지 도전하기2","date":"September 20, 2023"}},"next":{"fields":{"slug":"/react/"}},"previous":null},{"node":{"id":"3881cfde-2b4c-52e2-815d-3ce503e7f76a","excerpt":"챌린지 설명 CSS Layout 챌린지를 도전하면서 배운것들을 기록합니다. 1. Flexbox가 나오게 된 배경 웹페이지를 생성할때 레이아웃을 만든다는게 쉬운일이 아닙니다. 아래와 같이 flexbox를 사용하지 않고 3개의 박스를 한 화면에 나란히 배치시켜 보도록 하겠습니다. 예시 )  [HTML] [CSS] px을 사용하지 않고 나름 반응형에 적용한다고 %를 사용하여 작업해보았습니다. 또다른 방식의 { float: left; } 를 이용해서 사용해도 또다시 명령적으로 margin을\r\n사용할 수 밖에 없었습니다. 게다가 브라우저의 크기가 너무나도 다양하기 때문에 flexbox를 사용하지 않고 레이아웃을\r\n만드는 일은 엄청난 시간과 노력을 요구합니다. 이렇게 우리가 하는 계산을 컴퓨터가 대신 해주면 어떨가? 하는 생각에 flexbox가 나타나게 되었습니다. 2. Flexbox 사용하는 이점 레이아웃을 만드는 과정에서 flexbox를 사용하기 전에는 컴퓨터에게 일일히 계산해서\r\n모든것…","fields":{"slug":"/css/"},"frontmatter":{"categories":"CSS","title":"CSS Layout - 챌린지 도전하기1","date":"September 18, 2023"}},"next":{"fields":{"slug":"/gatsby-github-blog/"}},"previous":{"fields":{"slug":"/build/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}